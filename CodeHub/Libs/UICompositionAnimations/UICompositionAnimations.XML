<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UICompositionAnimations</name>
    </assembly>
    <members>
        <member name="T:UICompositionAnimations.CompositionExtensions">
            <summary>
            A static class that wraps the animation methods in the Windows.UI.Composition namespace
            </summary>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.SetCenterPoint(Windows.UI.Xaml.FrameworkElement,Windows.UI.Composition.Visual)">
            <summary>
            Sets the CenterPoint of a visual to the center of a given FrameworkElement
            </summary>
            <param name="element">The source element</param>
            <param name="visual">The Visual object for the source FrameworkElement</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action)">
            <summary>
            Starts a fade animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Starts a fade animation on the target UIElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeSlideAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Single},System.Single,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action)">
            <summary>
            Starts a fade and slide animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="msOp">The duration of the fade animation, in milliseconds</param>
            <param name="msSlide">The duration of the slide animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeSlideAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Single},System.Single,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Starts a fade and slide animation on the target UIElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="msOp">The duration of the fade animation, in milliseconds</param>
            <param name="msSlide">The duration of the slide animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeScaleAnimation(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action)">
            <summary>
            Starts a fade and scale animation on the target FrameworkElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="startScale">The initial scale X and Y value. If null, the current scale will be used</param>
            <param name="endScale">The final scale X and Y value</param>
            <param name="msOp">The duration of the fade animation, in milliseconds</param>
            <param name="msScale">The duration of the scale animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionFadeScaleAnimationAsync(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Starts a fade and scale animation on the target FrameworkElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="startScale">The initial scale X and Y value. If null, the current scale will be used</param>
            <param name="endScale">The final scale X and Y value</param>
            <param name="msOp">The duration of the fade animation, in milliseconds</param>
            <param name="msScale">The duration of the scale animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionScaleAnimation(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean,System.Action)">
            <summary>
            Starts a scale animation on the target FrameworkElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startScale">The initial scale X and Y value. If null, the current scale will be used</param>
            <param name="endScale">The final scale X and Y value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionScaleAnimationAsync(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts a scale animation on the target FrameworkElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startScale">The initial scale X and Y value. If null, the current scale will be used</param>
            <param name="endScale">The final scale X and Y value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionSlideAnimation(Windows.UI.Xaml.FrameworkElement,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean,System.Action)">
            <summary>
            Starts an offset animation on the target FrameworkElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="axis">The offset axis</param>
            <param name="startOffset">The initial offset X and Y value. If null, the current offset will be used</param>
            <param name="endOffset">The final offset X and Y value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionSlideAnimationAsync(Windows.UI.Xaml.FrameworkElement,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts an offset animation on the target FrameworkElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="axis">The offset axis</param>
            <param name="startOffset">The initial offset X and Y value. If null, the current offset will be used</param>
            <param name="endOffset">The final offset X and Y value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionRollAnimation(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean,System.Action)">
            <summary>
            Starts a roll animation on the target FrameworkElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis</param>
            <param name="startXY">The initial offset X and Y value. If null, the current offset will be used</param>
            <param name="endXY">The final offset X and Y value</param>
            <param name="startDegrees">The initial angle in degrees</param>
            <param name="endDegrees">The target angle in degrees</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
            <param name="callback">An Action to execute when the new animations end</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartCompositionRollAnimationAsync(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Single,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Single},System.Single,System.Nullable{System.Single},System.Single,System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts a roll animation on the target FrameworkElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis</param>
            <param name="startXY">The initial offset X and Y value. If null, the current offset will be used</param>
            <param name="endXY">The final offset X and Y value</param>
            <param name="startDegrees">The initial angle in degrees</param>
            <param name="endDegrees">The target angle in degrees</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StartAnimationAsync(Windows.UI.Composition.CompositionObject,System.String,System.Single,System.TimeSpan)">
            <summary>
            Starts an animation on the given property of a composition object
            </summary>
            <param name="compObject">The target object</param>
            <param name="property">The name of the property to animate</param>
            <param name="value">The final value of the property</param>
            <param name="duration">The animation duration</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.StopAnimations(Windows.UI.Xaml.UIElement,System.String[])">
            <summary>
            Stops the animations with the target names on the given element
            </summary>
            <param name="element">The target element</param>
            <param name="properties">The names of the animations to stop</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.SetCompositionScalePropertyAsync(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Sets the scale property of the visual object for a given framework element
            </summary>
            <param name="element">The target element</param>
            <param name="x">The X value of the scale property</param>
            <param name="y">The Y value of the scale property</param>
            <param name="z">The Z value of the scale property</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.SetCompositionTranslateProperty(Windows.UI.Xaml.FrameworkElement,UICompositionAnimations.Enums.TranslationAxis,System.Single)">
            <summary>
            Sets the offset property of the visual object for a given framework element
            </summary>
            <param name="element">The target element</param>
            <param name="axis">The offset axis to edit</param>
            <param name="offset">The final offset value to set for that axis</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.ResetCompositionVisualPropertiesAsync(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Resets the scale, offset and opacity properties for a framework element
            </summary>
            <param name="element">The element to edit</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.GetVisualOpacity(Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the opacity for the Visual object behind a given UIElement
            </summary>
            <param name="element">The source UIElement</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.SetVisualOpacity(Windows.UI.Xaml.UIElement,System.Single)">
            <summary>
            Sets the opacity for the Visual object behind a given UIElement
            </summary>
            <param name="element">The source UIElement</param>
            <param name="value">The new opacity value</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.SetVisualOffsetAsync(Windows.UI.Xaml.UIElement,UICompositionAnimations.Enums.TranslationAxis,System.Single)">
            <summary>
            Sets the offset value of a given UIElement
            </summary>
            <param name="element">The UIElement to edit</param>
            <param name="axis">The offset axis to set</param>
            <param name="value">The new value for the axis to set</param>
        </member>
        <member name="M:UICompositionAnimations.CompositionExtensions.GetVisual(Windows.UI.Xaml.UIElement)">
            <summary>
            Returns the Visual object for a given UIElement
            </summary>
            <param name="element">The source UIElement</param>
        </member>
        <member name="T:UICompositionAnimations.Composition.CompositionManager">
            <summary>
            Create composition animations using this class
            </summary>
        </member>
        <member name="T:UICompositionAnimations.Composition.CubicBeizerEasingProvider">
            <summary>
            A static class that generates a CubicBeizer curve from an input easing function name
            </summary>
        </member>
        <member name="T:UICompositionAnimations.Enums.EasingFunctionNames">
            <summary>
            Indicates an easing function for an animation
            </summary>
        </member>
        <member name="T:UICompositionAnimations.Enums.TranslationAxis">
            <summary>
            Indicates the translation axis to use in an animation
            </summary>
        </member>
        <member name="T:UICompositionAnimations.Helpers.ColorConverter">
            <summary>
            A simple class that contains some color managment methods
            </summary>
        </member>
        <member name="M:UICompositionAnimations.Helpers.ColorConverter.String2Color(System.String)">
            <summary>
            Returns the Color represented by the hex String
            </summary>
            <param name="color">If it contains just the RGB values {RRBBGG} the Alpha channel is automatically set to FF</param>
        </member>
        <member name="T:UICompositionAnimations.Helpers.Extensions">
            <summary>
            A misc extensions class
            </summary>
        </member>
        <member name="M:UICompositionAnimations.Helpers.Extensions.SafeEquals``1(``0,``0)">
            <summary>
            Safely calls the Equals method on a given object, returning false if the object is null
            </summary>
            <typeparam name="T">The Type of the two object</typeparam>
            <param name="value">The first object to test</param>
            <param name="test">The comparison value</param>
        </member>
        <member name="M:UICompositionAnimations.Helpers.Extensions.To``1(System.Object)">
            <summary>
            Performs a direct cast on the given object
            </summary>
        </member>
        <member name="M:UICompositionAnimations.Helpers.Extensions.ToDegrees(System.Single)">
            <summary>
            Converts an angle in radians to degrees
            </summary>
            <param name="radians">The value to convert</param>
        </member>
        <member name="M:UICompositionAnimations.Helpers.Extensions.ToRadians(System.Single)">
            <summary>
            Converts an angle in degrees to radians
            </summary>
            <param name="degrees">The value to convert</param>
        </member>
        <member name="T:UICompositionAnimations.XAMLTransformExtensions">
            <summary>
            A static class that wraps the animation methods in the Windows.UI.Xaml.Media.Animation namespace
            </summary>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action,System.Boolean)">
            <summary>
            Starts a fade animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts a fade animation on the target UIElement and returns a Task that completes when the animation ends
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeSlideAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action,System.Boolean)">
            <summary>
            Starts a fade and slide animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="msOp">The duration of the animation, in milliseconds</param>
            <param name="msSlide">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeSlideAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts and wait a fade and slide animation on the target UIElement
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="msOp">The duration of the fade animation, in milliseconds</param>
            <param name="msSlide">The duration of the slide animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.GetXAMLTransformFadeSlideStoryboard(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Fades the opacity of a target element and slides it over a given axis
            </summary>
            <param name="element">The element to animate</param>
            <param name="startOp">The initial opacity</param>
            <param name="endOp">The end opacity</param>
            <param name="axis">A String that indicates which axis to use with the TranslateTransform animation</param>
            <param name="startXY">The initial axis value</param>
            <param name="endXY">The final axis value</param>
            <param name="ms">The duration of the animation in milliseconds</param>
            <param name="easing">The easing function to use in the animation</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeScaleAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action,System.Boolean)">
            <summary>
            Starts a fade and slide animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="startScale">The initial scale value. If null, the current scale will be used</param>
            <param name="endScale">The final scale value</param>
            <param name="msOp">The duration of the animation, in milliseconds</param>
            <param name="msScale">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformFadeScaleAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts and wait a fade and slide animation on the target UIElement
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startOp">The initial opacity value. If null, the current opacity will be used</param>
            <param name="endOp">The final opacity value</param>
            <param name="startScale">The initial offset value. If null, the current offset will be used</param>
            <param name="endScale">The final offset value</param>
            <param name="msOp">The duration of the animation, in milliseconds</param>
            <param name="msSlide">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformScaleAnimation(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action,System.Boolean)">
            <summary>
            Starts a fade and slide animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startScale">The initial scale value. If null, the current scale will be used</param>
            <param name="endScale">The final scale value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformScaleAnimationAsync(Windows.UI.Xaml.UIElement,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts and wait a fade and slide animation on the target UIElement
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="startScale">The initial offset value. If null, the current offset will be used</param>
            <param name="endScale">The final offset value</param>
            <param name="ms">The duration of the fade animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformSlideAnimation(Windows.UI.Xaml.UIElement,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Action,System.Boolean)">
            <summary>
            Starts a fade and slide animation on the target UIElement and optionally runs a callback Action when the animations finish
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="ms">The duration of the animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="callback">An Action to execute when the new animations end</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.StartXAMLTransformSlideAnimationAsync(Windows.UI.Xaml.UIElement,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Nullable{System.Int32},UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Starts and wait a fade and slide animation on the target UIElement
            </summary>
            <param name="element">The UIElement to animate</param>
            <param name="axis">The offset axis to use on the translation animation</param>
            <param name="startXY">The initial offset value. If null, the current offset will be used</param>
            <param name="endXY">The final offset value</param>
            <param name="ms">The duration of the fade animation, in milliseconds</param>
            <param name="msDelay">The delay before the animation starts, in milliseconds. If null, there will be no delay</param>
            <param name="easingFunction">The easing function to use with the new animations</param>
            <param name="reverse">If true, the animation will be played in reverse mode when it finishes for the first time</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.GetXAMLTransformSlideStoryboard(Windows.UI.Xaml.UIElement,UICompositionAnimations.Enums.TranslationAxis,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Slides a target element over a given axis
            </summary>
            <param name="element">The element to animate</param>
            <param name="axis">A String that indicates which axis to use with the TranslateTransform animation</param>
            <param name="startXY">The initial axis value</param>
            <param name="endXY">The final axis value</param>
            <param name="ms">The duration of the animation in milliseconds</param>
            <param name="easing">The easing function to use in the animation</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.AnimateColor(Windows.UI.Xaml.Media.SolidColorBrush,System.String,System.Int32,UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Animates the target color brush to a given color
            </summary>
            <param name="solidColorBrush">The brush to animate</param>
            <param name="toColor">The target color to set</param>
            <param name="ms">The duration of the animation</param>
            <param name="easing">The easing function to use</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransformExtensions.GetLoopedFadeStoryboard(Windows.UI.Xaml.UIElement,System.Int32)">
            <summary>
            Gets a looped storyboard that makes the opacity of the element go from to 0 to 1 and vice versa
            </summary>
            <param name="element">The element to animate</param>
            <param name="ms">The loop duration</param>
        </member>
        <member name="T:UICompositionAnimations.XAMLTransform.EasingFunctionBaseProvider">
            <summary>
            A simple class that creates the desired XAML transform easing function
            </summary>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.EasingFunctionBaseProvider.ToEasingFunction(UICompositionAnimations.Enums.EasingFunctionNames)">
            <summary>
            Converts an easing function name to the right easing function
            </summary>
            <param name="ease">The desired easing function</param>
        </member>
        <member name="T:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit">
            <summary>
            A toolkit with some extensions for XAML animations and some useful methods
            </summary>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.GetRenderTransform``1(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            Returns the desired XAML transform object after assigning it to the render transform property of the target item
            </summary>
            <typeparam name="T">The desired render transform object</typeparam>
            <param name="element">The target element to modify</param>
            <param name="forceReset">If true, a new render transform object will always be created and assigned to the element</param>
            <returns></returns>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.WaitAsync(Windows.UI.Xaml.Media.Animation.Storyboard)">
            <summary>
            Starts an animation and waits for it to be completed
            </summary>
            <param name="storyboard">The target storyboard</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.RunDelegateOnAnimationEndedAsync(Windows.UI.Xaml.Media.Animation.Storyboard,System.Action)">
            <summary>
            Starts an animation and runs an action when it completes
            </summary>
            <param name="target">The storyboard to start</param>
            <param name="action">The callback action to execute when the animation ends</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.CompareTargetValue(Windows.UI.Xaml.Media.Animation.Storyboard,Windows.UI.Xaml.Media.Animation.Storyboard)">
            <summary>
            Checks whether or not the target value of the two animations is the same
            </summary>
            <param name="storyboard">The input animation</param>
            <param name="test">The animation to compare to the first one</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.CreateDoubleAnimation(Windows.UI.Xaml.DependencyObject,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,UICompositionAnimations.Enums.EasingFunctionNames,System.Boolean)">
            <summary>
            Prepares a an animation with the given info
            </summary>
            <param name="target">The target object to animate</param>
            <param name="property">The property to animate inside the target object</param>
            <param name="from">The initial property value</param>
            <param name="to">The final property value</param>
            <param name="ms">The duration of the animation</param>
            <param name="easing">The easing function to use inside the animation</param>
            <param name="enableDependecyAnimations">Indicates whether or not to apply this animation to elements that need the visual tree to be rearranged</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.PrepareStory(Windows.UI.Xaml.Media.Animation.Timeline[])">
            <summary>
            Prepares a storyboard with the given animations
            </summary>
            <param name="animations">The animations to run inside the storyboard</param>
        </member>
        <member name="M:UICompositionAnimations.XAMLTransform.XAMLTransformToolkit.ToPropertyString(UICompositionAnimations.Enums.TranslationAxis)">
            <summary>
            Converts the given TranslationAxis enum into its String representation
            </summary>
            <param name="axis">The enum to convert</param>
        </member>
    </members>
</doc>
